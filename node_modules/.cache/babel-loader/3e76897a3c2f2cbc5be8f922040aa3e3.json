{"ast":null,"code":"var _jsxFileName = \"C:\\\\All React Project\\\\Resume Projects\\\\daraz-clone-client\\\\src\\\\components\\\\Context.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext } from \"react\";\nimport axios from \"axios\";\nimport Reducer from \"./Reducer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/React.createContext();\nconst initialState = {\n  loading: true,\n  firstName: \"Nahean\",\n  lastName: \"Fardous\"\n}; //Log In Bug Fix\n\nlet logCheck = false;\n\nconst userInfoCheck = () => {\n  let getUserInfo = localStorage.getItem(\"userInfo\");\n  let parsedUser = \"\";\n\n  if (getUserInfo) {\n    parsedUser = JSON.parse(getUserInfo);\n  }\n\n  if (parsedUser.tokenExp) {\n    if (parsedUser.tokenExp < new Date().getTime()) {\n      // console.log(\"token Expired\");\n      // localStorage.setItem(\"access-token\", \"\");\n      // localStorage.setItem(\"userInfo\", \"\");\n      logCheck = false;\n    } else {\n      // console.log(\"token Valid\");\n      logCheck = true;\n\n      if (parsedUser.name) {\n        logCheck = true;\n      }\n    }\n  } else {\n    logCheck = false;\n  }\n\n  console.log(logCheck);\n};\n\nuserInfoCheck(); //**********\n//  Axios\n//**********\n//  baseURL: \"https://daraz-clone-v1.herokuapp.com/\",\n//baseURL: \"http://localhost:4000/\",\n//http://192.168.31.67:4000/\n\nconst API = axios.create({\n  baseURL: \"https://daraz-clone.onrender.com/\"\n}); // const API = axios.create({\n//   baseURL: \"http://localhost:4000/\",\n// });\n\nlet accessToken = localStorage.getItem(\"access-token\");\nAPI.interceptors.request.use(req => {\n  if (accessToken) {\n    req.headers.Authorization = `Bearer ${accessToken}`;\n    return req;\n  }\n\n  return req;\n});\n\nconst AppProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  const [test, setTest] = useState(\"Context Text\");\n  const [cart, setCart] = useState([]);\n  const [topNottification, setTopNottification] = useState(\"\");\n  const [logedIn, setLogedIn] = useState(logCheck);\n  const [userInfo, setUserInfo] = useState({\n    name: \"\"\n  }); //Header Left Category Dropdown\n\n  const [ctDropdown, setCtDropdown] = useState(false);\n  const [cartItems, setCartItems] = useState([]); //*****************************************************\n  //************Nottification Message********************\n  //*****************************************************\n\n  const clrSetF = () => {\n    setTopNottification(\"\");\n  };\n\n  const showRedMsg = (data, backgroundColor, textColor) => {\n    setTopNottification({\n      type: data.type,\n      name: data.name,\n      bg: \"#ff7302\",\n      color: \"white\"\n    });\n    setTimeout(clrSetF, 2000);\n  }; //**********\n  //  Axios\n  //**********\n  //  baseURL: \"https://testing-v1-2021-08-31.herokuapp.com/\",\n  //baseURL: \"http://localhost:4000/\",\n  // const API = axios.create({\n  //   baseURL: \"http://localhost:4000/\",\n  // });\n  //****************************************************************************************************\n  //********************To save the login info in localstorage******************************************\n  //****************************************************************************************************\n\n\n  const localizingToken = token => {\n    localStorage.setItem(\"access-token\", token);\n    setLogedIn(true);\n    checkUserInfo();\n    accessToken = localStorage.getItem(\"access-token\");\n    API.interceptors.request.use(req => {\n      if (accessToken) {\n        req.headers.Authorization = `Bearer ${accessToken}`;\n        return req;\n      }\n\n      return req;\n    });\n  };\n\n  const localizingUserInfo = User => {\n    localStorage.setItem(\"userInfo\", JSON.stringify(User));\n    checkUserInfo();\n  };\n\n  const checkUserInfo = () => {\n    let getUserInfo = localStorage.getItem(\"userInfo\");\n\n    if (getUserInfo) {\n      let parsedUser = JSON.parse(getUserInfo);\n\n      if (parsedUser.tokenExp < new Date().getTime()) {\n        // console.log(\"token Expired\");\n        localStorage.setItem(\"access-token\", \"\");\n        localStorage.setItem(\"userInfo\", \"\");\n        setUserInfo({});\n        setLogedIn(false);\n      } else {\n        // console.log(\"token Valid\");\n        setUserInfo(parsedUser);\n\n        if (parsedUser.name) {\n          setLogedIn(true);\n          accessToken = localStorage.getItem(\"access-token\");\n          API.interceptors.request.use(req => {\n            if (accessToken) {\n              req.headers.Authorization = `Bearer ${accessToken}`;\n              return req;\n            }\n\n            return req;\n          });\n        }\n      }\n    }\n  };\n\n  useEffect(() => {\n    checkUserInfo();\n  }, []); //To clear Localstorage log in info\n\n  const LogOut = async () => {\n    localizingUserInfo(\"\");\n    localizingToken(\"\");\n    setLogedIn(false);\n    setUserInfo({});\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: { ...state,\n      test,\n      setTest,\n      API,\n      cart,\n      setCart,\n      topNottification,\n      setTopNottification,\n      showRedMsg,\n      localizingToken,\n      localizingUserInfo,\n      logedIn,\n      setLogedIn,\n      ctDropdown,\n      setCtDropdown,\n      cartItems,\n      setCartItems,\n      userInfo,\n      setUserInfo,\n      LogOut\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"YAYPgFSWadqs15x/XCxUqeU7d+U=\");\n\n_c = AppProvider;\nexport const useGlobalContext = () => {\n  _s2();\n\n  return useContext(AppContext);\n};\n\n_s2(useGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport { AppContext, AppProvider }; //so i would normally use this line in the future child but becouse i am returning right now i would use ---useglobalContext-- hook ine next pages.\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/All React Project/Resume Projects/daraz-clone-client/src/components/Context.js"],"names":["React","useState","useEffect","useReducer","useContext","axios","Reducer","AppContext","createContext","initialState","loading","firstName","lastName","logCheck","userInfoCheck","getUserInfo","localStorage","getItem","parsedUser","JSON","parse","tokenExp","Date","getTime","name","console","log","API","create","baseURL","accessToken","interceptors","request","use","req","headers","Authorization","AppProvider","children","state","dispatch","test","setTest","cart","setCart","topNottification","setTopNottification","logedIn","setLogedIn","userInfo","setUserInfo","ctDropdown","setCtDropdown","cartItems","setCartItems","clrSetF","showRedMsg","data","backgroundColor","textColor","type","bg","color","setTimeout","localizingToken","token","setItem","checkUserInfo","localizingUserInfo","User","stringify","LogOut","useGlobalContext"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport Reducer from \"./Reducer\";\r\n\r\nconst AppContext = React.createContext();\r\nconst initialState = {\r\n  loading: true,\r\n  firstName: \"Nahean\",\r\n  lastName: \"Fardous\",\r\n};\r\n\r\n//Log In Bug Fix\r\nlet logCheck = false;\r\nconst userInfoCheck = () => {\r\n  let getUserInfo = localStorage.getItem(\"userInfo\");\r\n  let parsedUser = \"\";\r\n  if (getUserInfo) {\r\n    parsedUser = JSON.parse(getUserInfo);\r\n  }\r\n  if (parsedUser.tokenExp) {\r\n    if (parsedUser.tokenExp < new Date().getTime()) {\r\n      // console.log(\"token Expired\");\r\n      // localStorage.setItem(\"access-token\", \"\");\r\n      // localStorage.setItem(\"userInfo\", \"\");\r\n      logCheck = false;\r\n    } else {\r\n      // console.log(\"token Valid\");\r\n      logCheck = true;\r\n      if (parsedUser.name) {\r\n        logCheck = true;\r\n      }\r\n    }\r\n  } else {\r\n    logCheck = false;\r\n  }\r\n  console.log(logCheck);\r\n};\r\nuserInfoCheck();\r\n\r\n//**********\r\n//  Axios\r\n//**********\r\n\r\n//  baseURL: \"https://daraz-clone-v1.herokuapp.com/\",\r\n//baseURL: \"http://localhost:4000/\",\r\n//http://192.168.31.67:4000/\r\nconst API = axios.create({\r\n  baseURL: \"https://daraz-clone.onrender.com/\",\r\n});\r\n// const API = axios.create({\r\n//   baseURL: \"http://localhost:4000/\",\r\n// });\r\n\r\nlet accessToken = localStorage.getItem(\"access-token\");\r\n\r\nAPI.interceptors.request.use((req) => {\r\n  if (accessToken) {\r\n    req.headers.Authorization = `Bearer ${accessToken}`;\r\n\r\n    return req;\r\n  }\r\n  return req;\r\n});\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(Reducer, initialState);\r\n  const [test, setTest] = useState(\"Context Text\");\r\n  const [cart, setCart] = useState([]);\r\n  const [topNottification, setTopNottification] = useState(\"\");\r\n\r\n  const [logedIn, setLogedIn] = useState(logCheck);\r\n  const [userInfo, setUserInfo] = useState({ name: \"\" });\r\n\r\n  //Header Left Category Dropdown\r\n  const [ctDropdown, setCtDropdown] = useState(false);\r\n\r\n  const [cartItems, setCartItems] = useState([]);\r\n\r\n  //*****************************************************\r\n  //************Nottification Message********************\r\n  //*****************************************************\r\n  const clrSetF = () => {\r\n    setTopNottification(\"\");\r\n  };\r\n  const showRedMsg = (data, backgroundColor, textColor) => {\r\n    setTopNottification({\r\n      type: data.type,\r\n      name: data.name,\r\n      bg: \"#ff7302\",\r\n      color: \"white\",\r\n    });\r\n    setTimeout(clrSetF, 2000);\r\n  };\r\n\r\n  //**********\r\n  //  Axios\r\n  //**********\r\n\r\n  //  baseURL: \"https://testing-v1-2021-08-31.herokuapp.com/\",\r\n  //baseURL: \"http://localhost:4000/\",\r\n  // const API = axios.create({\r\n  //   baseURL: \"http://localhost:4000/\",\r\n  // });\r\n\r\n  //****************************************************************************************************\r\n  //********************To save the login info in localstorage******************************************\r\n  //****************************************************************************************************\r\n  const localizingToken = (token) => {\r\n    localStorage.setItem(\"access-token\", token);\r\n    setLogedIn(true);\r\n    checkUserInfo();\r\n\r\n    accessToken = localStorage.getItem(\"access-token\");\r\n\r\n    API.interceptors.request.use((req) => {\r\n      if (accessToken) {\r\n        req.headers.Authorization = `Bearer ${accessToken}`;\r\n\r\n        return req;\r\n      }\r\n      return req;\r\n    });\r\n  };\r\n  const localizingUserInfo = (User) => {\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(User));\r\n    checkUserInfo();\r\n  };\r\n  const checkUserInfo = () => {\r\n    let getUserInfo = localStorage.getItem(\"userInfo\");\r\n    if (getUserInfo) {\r\n      let parsedUser = JSON.parse(getUserInfo);\r\n      if (parsedUser.tokenExp < new Date().getTime()) {\r\n        // console.log(\"token Expired\");\r\n        localStorage.setItem(\"access-token\", \"\");\r\n        localStorage.setItem(\"userInfo\", \"\");\r\n        setUserInfo({});\r\n        setLogedIn(false);\r\n      } else {\r\n        // console.log(\"token Valid\");\r\n        setUserInfo(parsedUser);\r\n\r\n        if (parsedUser.name) {\r\n          setLogedIn(true);\r\n          accessToken = localStorage.getItem(\"access-token\");\r\n\r\n          API.interceptors.request.use((req) => {\r\n            if (accessToken) {\r\n              req.headers.Authorization = `Bearer ${accessToken}`;\r\n\r\n              return req;\r\n            }\r\n            return req;\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    checkUserInfo();\r\n  }, []);\r\n\r\n  //To clear Localstorage log in info\r\n  const LogOut = async () => {\r\n    localizingUserInfo(\"\");\r\n    localizingToken(\"\");\r\n    setLogedIn(false);\r\n    setUserInfo({});\r\n  };\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        ...state,\r\n        test,\r\n        setTest,\r\n        API,\r\n        cart,\r\n        setCart,\r\n        topNottification,\r\n        setTopNottification,\r\n        showRedMsg,\r\n        localizingToken,\r\n        localizingUserInfo,\r\n        logedIn,\r\n        setLogedIn,\r\n        ctDropdown,\r\n        setCtDropdown,\r\n        cartItems,\r\n        setCartItems,\r\n        userInfo,\r\n        setUserInfo,\r\n        LogOut,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider }; //so i would normally use this line in the future child but becouse i am returning right now i would use ---useglobalContext-- hook ine next pages.\r\n"]},"metadata":{},"sourceType":"module"}